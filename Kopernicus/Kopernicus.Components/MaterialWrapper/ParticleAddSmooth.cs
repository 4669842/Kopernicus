// Material wrapper generated by shader translator tool
using System;
using UnityEngine;

namespace Kopernicus
{
    namespace MaterialWrapper
    {
        public class ParticleAddSmooth : Material
        {
            // Internal property ID tracking object
            protected class Properties
            {
                // Return the shader for this wrapper
                private const String shaderName = "Particles/Additive (Soft)";
                public static Shader shader
                {
                    get { return Shader.Find (shaderName); }
                }

                // Particle Texture, default = "white" { }
                public const String mainTexKey = "_MainTex";
                public Int32 mainTexID { get; private set; }

                // Soft Particles Factor, default = 1
                public const String invFadeKey = "_InvFade";
                public Int32 invFadeID { get; private set; }

                // Singleton instance
                private static Properties singleton = null;
                public static Properties Instance
                {
                    get
                    {
                        // Construct the singleton if it does not exist
                        if(singleton == null)
                            singleton = new Properties();
            
                        return singleton;
                    }
                }

                private Properties()
                {
                    mainTexID = Shader.PropertyToID(mainTexKey);
                    invFadeID = Shader.PropertyToID(invFadeKey);
                }
            }

            // Is some random material this material 
            public static Boolean UsesSameShader(Material m)
            {
                return m.shader.name == Properties.shader.name;
            }

            // Particle Texture, default = "white" { }
            public Texture2D mainTex
            {
                get { return GetTexture (Properties.Instance.mainTexID) as Texture2D; }
                set { SetTexture (Properties.Instance.mainTexID, value); }
            }

            public Vector2 mainTexScale
            {
                get { return GetTextureScale (Properties.mainTexKey); }
                set { SetTextureScale (Properties.mainTexKey, value); }
            }

            public Vector2 mainTexOffset
            {
                get { return GetTextureOffset (Properties.mainTexKey); }
                set { SetTextureOffset (Properties.mainTexKey, value); }
            }

            // Soft Particles Factor, default = 1
            public Single invFade
            {
                get { return GetFloat (Properties.Instance.invFadeID); }
                set { SetFloat (Properties.Instance.invFadeID, Mathf.Clamp(value,0.01f,3f)); }
            }

            public ParticleAddSmooth() : base(Properties.shader)
            {
            }

            [Obsolete("Creating materials from shader source String is no longer supported. Use Shader assets instead.")]
            public ParticleAddSmooth(String contents) : base(contents)
            {
                base.shader = Properties.shader;
            }

            public ParticleAddSmooth(Material material) : base(material)
            {
                // Throw exception if this material was not the proper material
                if (material.shader.name != Properties.shader.name)
                    throw new InvalidOperationException("Type Mismatch: Particles/Additive (Soft) shader required");
            }

        }
    }
}
