// Material wrapper generated by shader translator tool
using System;
using System.Reflection;
using UnityEngine;

namespace Kopernicus
{
    namespace MaterialWrapper
    {
        public class ScaledPlanetSimple : Material
        {
            // Return the shader for this wrapper
            private const string shaderName = "Terrain/Scaled Planet (Simple)";
            private static Shader shaderForMaterial
            {
                get { return Shader.Find (shaderName); }
            }

            // Specular Color, default = (0.5,0.5,0.5,1)
            private const string specColorKey = "_SpecColor";
            public Color specColor
            {
                get { return GetColor (specColorKey); }
                set { SetColor (specColorKey, value); }
            }

            // Shininess, default = 0.078125
            private const string shininessKey = "_Shininess";
            public float shininess
            {
                get { return GetFloat (shininessKey); }
                set { SetFloat (shininessKey, Mathf.Clamp(value,0.03f,1f)); }
            }

            // Base (RGB) Gloss (A), default = "white" {}
            private const string mainTexKey = "_MainTex";
            public Texture2D mainTex
            {
                get { return GetTexture (mainTexKey) as Texture2D; }
                set { SetTexture (mainTexKey, value); }
            }

            // Normalmap, default = "bump" {}
            private const string bumpMapKey = "_BumpMap";
            public Texture2D bumpMap
            {
                get { return GetTexture (bumpMapKey) as Texture2D; }
                set { SetTexture (bumpMapKey, value); }
            }

            // Opacity, default = 1
            private const string opacityKey = "_Opacity";
            public float opacity
            {
                get { return GetFloat (opacityKey); }
                set { SetFloat (opacityKey, Mathf.Clamp(value,0f,1f)); }
            }

            // Resource Map (RGB), default = "black" {}
            private const string resourceMapKey = "_ResourceMap";
            public Texture2D resourceMap
            {
                get { return GetTexture (resourceMapKey) as Texture2D; }
                set { SetTexture (resourceMapKey, value); }
            }

            public ScaledPlanetSimple() : base(shaderForMaterial)
            {
            }

            public ScaledPlanetSimple(string contents) : base(contents)
            {
                base.shader = shaderForMaterial;
            }

            public ScaledPlanetSimple(Material material) : base(material)
            {
                // Throw exception if this material was not the proper material
                if (material.shader.name != shaderName)
                    throw new InvalidOperationException("ScaledPlanetSimple material requires the \"" + shaderName + "\" shader");
            }

        }
    }
}
