// Material wrapper generated by shader translator tool
using System;
using System.Reflection;
using UnityEngine;

namespace Kopernicus
{
    namespace MaterialWrapper
    {
        public class PQSProjectionFallback : Material
        {
            // Return the shader for this wrapper
            private const string shaderName = "Terrain/PQS/Sphere Projection SURFACE QUAD (Fallback) ";
            private static Shader shaderForMaterial
            {
                get { return Shader.Find (shaderName); }
            }

            // Saturation, default = 1
            private const string saturationKey = "_saturation";
            public float saturation
            {
                get { return GetFloat (saturationKey); }
                set { SetFloat (saturationKey, value); }
            }

            // Contrast, default = 1
            private const string contrastKey = "_contrast";
            public float contrast
            {
                get { return GetFloat (contrastKey); }
                set { SetFloat (contrastKey, value); }
            }

            // Colour Unsaturation (A = Factor), default = (1,1,1,0)
            private const string tintColorKey = "_tintColor";
            public Color tintColor
            {
                get { return GetColor (tintColorKey); }
                set { SetColor (tintColorKey, value); }
            }

            // Near Tiling, default = 1000
            private const string texTilingKey = "_texTiling";
            public float texTiling
            {
                get { return GetFloat (texTilingKey); }
                set { SetFloat (texTilingKey, value); }
            }

            // Near Blend, default = 0.5
            private const string texPowerKey = "_texPower";
            public float texPower
            {
                get { return GetFloat (texPowerKey); }
                set { SetFloat (texPowerKey, value); }
            }

            // Far Blend, default = 0.5
            private const string multiPowerKey = "_multiPower";
            public float multiPower
            {
                get { return GetFloat (multiPowerKey); }
                set { SetFloat (multiPowerKey, value); }
            }

            // NearFar Start, default = 2000
            private const string groundTexStartKey = "_groundTexStart";
            public float groundTexStart
            {
                get { return GetFloat (groundTexStartKey); }
                set { SetFloat (groundTexStartKey, value); }
            }

            // NearFar Start, default = 10000
            private const string groundTexEndKey = "_groundTexEnd";
            public float groundTexEnd
            {
                get { return GetFloat (groundTexEndKey); }
                set { SetFloat (groundTexEndKey, value); }
            }

            // Multifactor, default = 0.5
            private const string multiFactorKey = "_multiFactor";
            public float multiFactor
            {
                get { return GetFloat (multiFactorKey); }
                set { SetFloat (multiFactorKey, value); }
            }

            // Main Texture, default = "white" {}
            private const string mainTexKey = "_mainTex";
            public Texture2D mainTex
            {
                get { return GetTexture (mainTexKey) as Texture2D; }
                set { SetTexture (mainTexKey, value); }
            }

            // PlanetOpacity, default = 1
            private const string planetOpacityKey = "_PlanetOpacity";
            public float planetOpacity
            {
                get { return GetFloat (planetOpacityKey); }
                set { SetFloat (planetOpacityKey, value); }
            }

            public PQSProjectionFallback() : base(shaderForMaterial)
            {
            }

            public PQSProjectionFallback(string contents) : base(contents)
            {
                base.shader = shaderForMaterial;
            }

            public PQSProjectionFallback(Material material) : base(material)
            {
                // Throw exception if this material was not the proper material
                if (material.shader.name != shaderName)
                    throw new InvalidOperationException("PQSProjectionFallback material requires the \"" + shaderName + "\" shader");
            }

        }
    }
}
