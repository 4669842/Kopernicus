// Material wrapper generated by shader translator tool
using System;
using System.Reflection;
using UnityEngine;

namespace Kopernicus
{
    namespace MaterialWrapper
    {
        public class AtmosphereFromGround : Material
        {
            // Return the shader for this wrapper
            private const string shaderName = "AtmosphereFromGround";
            private static Shader shaderForMaterial
            {
                get { return Shader.Find (shaderName); }
            }

            // Offset Transform, default = (0,0,0,1)
            private const string offsetTransformKey = "_OffsetTransform";
            public Vector4 offsetTransform
            {
                get { return GetVector (offsetTransformKey); }
                set { SetVector (offsetTransformKey, value); }
            }

            // Camera Position, default = (0,0,0,0)
            private const string v4CameraPosKey = "_v4CameraPos";
            public Vector4 v4CameraPos
            {
                get { return GetVector (v4CameraPosKey); }
                set { SetVector (v4CameraPosKey, value); }
            }

            // Light Direction, default = (0,0,0,0)
            private const string v4LightDirKey = "_v4LightDir";
            public Vector4 v4LightDir
            {
                get { return GetVector (v4LightDirKey); }
                set { SetVector (v4LightDirKey, value); }
            }

            // Inverse WaveLength, default = (0,0,0,0)
            private const string cInvWaveLengthKey = "_cInvWaveLength";
            public Color cInvWaveLength
            {
                get { return GetColor (cInvWaveLengthKey); }
                set { SetColor (cInvWaveLengthKey, value); }
            }

            // Camera Height, default = 0
            private const string fCameraHeightKey = "_fCameraHeight";
            public float fCameraHeight
            {
                get { return GetFloat (fCameraHeightKey); }
                set { SetFloat (fCameraHeightKey, value); }
            }

            // Camera Height2, default = 0
            private const string fCameraHeight2Key = "_fCameraHeight2";
            public float fCameraHeight2
            {
                get { return GetFloat (fCameraHeight2Key); }
                set { SetFloat (fCameraHeight2Key, value); }
            }

            // Outer Radius, default = 0
            private const string fOuterRadiusKey = "_fOuterRadius";
            public float fOuterRadius
            {
                get { return GetFloat (fOuterRadiusKey); }
                set { SetFloat (fOuterRadiusKey, value); }
            }

            // Outer Radius 2, default = 0
            private const string fOuterRadius2Key = "_fOuterRadius2";
            public float fOuterRadius2
            {
                get { return GetFloat (fOuterRadius2Key); }
                set { SetFloat (fOuterRadius2Key, value); }
            }

            // Inner Radius, default = 0
            private const string fInnerRadiusKey = "_fInnerRadius";
            public float fInnerRadius
            {
                get { return GetFloat (fInnerRadiusKey); }
                set { SetFloat (fInnerRadiusKey, value); }
            }

            // Inner Radius 2, default = 0
            private const string fInnerRadius2Key = "_fInnerRadius2";
            public float fInnerRadius2
            {
                get { return GetFloat (fInnerRadius2Key); }
                set { SetFloat (fInnerRadius2Key, value); }
            }

            // KrESun, default = 0
            private const string fKrESunKey = "_fKrESun";
            public float fKrESun
            {
                get { return GetFloat (fKrESunKey); }
                set { SetFloat (fKrESunKey, value); }
            }

            // KmESun, default = 0
            private const string fKmESunKey = "_fKmESun";
            public float fKmESun
            {
                get { return GetFloat (fKmESunKey); }
                set { SetFloat (fKmESunKey, value); }
            }

            // Kr4PI, default = 0
            private const string fKr4PIKey = "_fKr4PI";
            public float fKr4PI
            {
                get { return GetFloat (fKr4PIKey); }
                set { SetFloat (fKr4PIKey, value); }
            }

            // Km4PI, default = 0
            private const string fKm4PIKey = "_fKm4PI";
            public float fKm4PI
            {
                get { return GetFloat (fKm4PIKey); }
                set { SetFloat (fKm4PIKey, value); }
            }

            // Scale, default = 0
            private const string fScaleKey = "_fScale";
            public float fScale
            {
                get { return GetFloat (fScaleKey); }
                set { SetFloat (fScaleKey, value); }
            }

            // Scale Depth, default = 0
            private const string fScaleDepthKey = "_fScaleDepth";
            public float fScaleDepth
            {
                get { return GetFloat (fScaleDepthKey); }
                set { SetFloat (fScaleDepthKey, value); }
            }

            // Scale Over Scale Depth, default = 0
            private const string fScaleOverScaleDepthKey = "_fScaleOverScaleDepth";
            public float fScaleOverScaleDepth
            {
                get { return GetFloat (fScaleOverScaleDepthKey); }
                set { SetFloat (fScaleOverScaleDepthKey, value); }
            }

            // Samples, default = 0
            private const string samplesKey = "_Samples";
            public float samples
            {
                get { return GetFloat (samplesKey); }
                set { SetFloat (samplesKey, value); }
            }

            // G, default = 0
            private const string gKey = "_G";
            public float g
            {
                get { return GetFloat (gKey); }
                set { SetFloat (gKey, value); }
            }

            // G2, default = 0
            private const string g2Key = "_G2";
            public float g2
            {
                get { return GetFloat (g2Key); }
                set { SetFloat (g2Key, value); }
            }

            public AtmosphereFromGround() : base(shaderForMaterial)
            {
            }

            public AtmosphereFromGround(string contents) : base(contents)
            {
                base.shader = shaderForMaterial;
            }

            public AtmosphereFromGround(Material material) : base(material)
            {
                // Throw exception if this material was not the proper material
                if (material.shader.name != shaderName)
                    throw new InvalidOperationException("AtmosphereFromGround material requires the \"" + shaderName + "\" shader");
            }

        }
    }
}
