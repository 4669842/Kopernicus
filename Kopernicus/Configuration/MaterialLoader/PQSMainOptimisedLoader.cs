// Material wrapper generated by shader translator tool
using System;
using System.Reflection;
using UnityEngine;

using Kopernicus.MaterialWrapper;

namespace Kopernicus
{
    namespace Configuration
    {
        public class PQSMainOptimisedLoader : PQSMainOptimised
        {
            // Saturation, default = 1
            [ParserTarget("saturation", optional = true)]
            private NumericParser<float> saturationSetter
            {
                set { base.saturation = value.value; }
            }

            // Contrast, default = 1
            [ParserTarget("contrast", optional = true)]
            private NumericParser<float> contrastSetter
            {
                set { base.contrast = value.value; }
            }

            // Colour Unsaturation (A = Factor), default = (1,1,1,0)
            [ParserTarget("tintColor", optional = true)]
            private ColorParser tintColorSetter
            {
                set { base.tintColor = value.value; }
            }

            // Near Blend, default = 0.5
            [ParserTarget("powerNear", optional = true)]
            private NumericParser<float> powerNearSetter
            {
                set { base.powerNear = value.value; }
            }

            // Far Blend, default = 0.5
            [ParserTarget("powerFar", optional = true)]
            private NumericParser<float> powerFarSetter
            {
                set { base.powerFar = value.value; }
            }

            // NearFar Start, default = 2000
            [ParserTarget("groundTexStart", optional = true)]
            private NumericParser<float> groundTexStartSetter
            {
                set { base.groundTexStart = value.value; }
            }

            // NearFar End, default = 10000
            [ParserTarget("groundTexEnd", optional = true)]
            private NumericParser<float> groundTexEndSetter
            {
                set { base.groundTexEnd = value.value; }
            }

            // Steep Blend, default = 1
            [ParserTarget("steepPower", optional = true)]
            private NumericParser<float> steepPowerSetter
            {
                set { base.steepPower = value.value; }
            }

            // Steep Fade Start, default = 20000
            [ParserTarget("steepTexStart", optional = true)]
            private NumericParser<float> steepTexStartSetter
            {
                set { base.steepTexStart = value.value; }
            }

            // Steep Fade End, default = 30000
            [ParserTarget("steepTexEnd", optional = true)]
            private NumericParser<float> steepTexEndSetter
            {
                set { base.steepTexEnd = value.value; }
            }

            // Steep Texture, default = "white" {}
            [ParserTarget("steepTex", optional = true)]
            private Texture2DParser steepTexSetter
            {
                set { base.steepTex = value.value; }
            }

            // Steep Bump Map, default = "bump" {}
            [ParserTarget("steepBumpMap", optional = true)]
            private Texture2DParser steepBumpMapSetter
            {
                set { base.steepBumpMap = value.value; }
            }

            // Steep Near Tiling, default = 1
            [ParserTarget("steepNearTiling", optional = true)]
            private NumericParser<float> steepNearTilingSetter
            {
                set { base.steepNearTiling = value.value; }
            }

            // Steep Far Tiling, default = 1
            [ParserTarget("steepTiling", optional = true)]
            private NumericParser<float> steepTilingSetter
            {
                set { base.steepTiling = value.value; }
            }

            // Low Texture, default = "white" {}
            [ParserTarget("lowTex", optional = true)]
            private Texture2DParser lowTexSetter
            {
                set { base.lowTex = value.value; }
            }

            // Low Bump Map, default = "bump" {}
            [ParserTarget("lowBumpMap", optional = true)]
            private Texture2DParser lowBumpMapSetter
            {
                set { base.lowBumpMap = value.value; }
            }

            // Low Near Tiling, default = 1000
            [ParserTarget("lowNearTiling", optional = true)]
            private NumericParser<float> lowNearTilingSetter
            {
                set { base.lowNearTiling = value.value; }
            }

            // Low Far Tiling, default = 10
            [ParserTarget("lowMultiFactor", optional = true)]
            private NumericParser<float> lowMultiFactorSetter
            {
                set { base.lowMultiFactor = value.value; }
            }

            // Low Bump Near Tiling, default = 1
            [ParserTarget("lowBumpNearTiling", optional = true)]
            private NumericParser<float> lowBumpNearTilingSetter
            {
                set { base.lowBumpNearTiling = value.value; }
            }

            // Low Bump Far Tiling, default = 1
            [ParserTarget("lowBumpFarTiling", optional = true)]
            private NumericParser<float> lowBumpFarTilingSetter
            {
                set { base.lowBumpFarTiling = value.value; }
            }

            // Mid Texture, default = "white" {}
            [ParserTarget("midTex", optional = true)]
            private Texture2DParser midTexSetter
            {
                set { base.midTex = value.value; }
            }

            // Mid Bump Map, default = "bump" {}
            [ParserTarget("midBumpMap", optional = true)]
            private Texture2DParser midBumpMapSetter
            {
                set { base.midBumpMap = value.value; }
            }

            // Mid Near Tiling, default = 1000
            [ParserTarget("midNearTiling", optional = true)]
            private NumericParser<float> midNearTilingSetter
            {
                set { base.midNearTiling = value.value; }
            }

            // Mid Far Tiling, default = 10
            [ParserTarget("midMultiFactor", optional = true)]
            private NumericParser<float> midMultiFactorSetter
            {
                set { base.midMultiFactor = value.value; }
            }

            // Mid Bump Near Tiling, default = 1
            [ParserTarget("midBumpNearTiling", optional = true)]
            private NumericParser<float> midBumpNearTilingSetter
            {
                set { base.midBumpNearTiling = value.value; }
            }

            // Mid Bump Far Tiling, default = 1
            [ParserTarget("midBumpFarTiling", optional = true)]
            private NumericParser<float> midBumpFarTilingSetter
            {
                set { base.midBumpFarTiling = value.value; }
            }

            // High Texture, default = "white" {}
            [ParserTarget("highTex", optional = true)]
            private Texture2DParser highTexSetter
            {
                set { base.highTex = value.value; }
            }

            // High Bump Map, default = "bump" {}
            [ParserTarget("highBumpMap", optional = true)]
            private Texture2DParser highBumpMapSetter
            {
                set { base.highBumpMap = value.value; }
            }

            // High Near Tiling, default = 1000
            [ParserTarget("highNearTiling", optional = true)]
            private NumericParser<float> highNearTilingSetter
            {
                set { base.highNearTiling = value.value; }
            }

            // High Far Tiling, default = 10
            [ParserTarget("highMultiFactor", optional = true)]
            private NumericParser<float> highMultiFactorSetter
            {
                set { base.highMultiFactor = value.value; }
            }

            // High Bump Near Tiling, default = 1
            [ParserTarget("highBumpNearTiling", optional = true)]
            private NumericParser<float> highBumpNearTilingSetter
            {
                set { base.highBumpNearTiling = value.value; }
            }

            // High Bump Far Tiling, default = 1
            [ParserTarget("highBumpFarTiling", optional = true)]
            private NumericParser<float> highBumpFarTilingSetter
            {
                set { base.highBumpFarTiling = value.value; }
            }

            // Low Transition Start, default = 0
            [ParserTarget("lowStart", optional = true)]
            private NumericParser<float> lowStartSetter
            {
                set { base.lowStart = value.value; }
            }

            // Low Transition End, default = 0.3
            [ParserTarget("lowEnd", optional = true)]
            private NumericParser<float> lowEndSetter
            {
                set { base.lowEnd = value.value; }
            }

            // High Transition Start, default = 0.8
            [ParserTarget("highStart", optional = true)]
            private NumericParser<float> highStartSetter
            {
                set { base.highStart = value.value; }
            }

            // High Transition End, default = 1
            [ParserTarget("highEnd", optional = true)]
            private NumericParser<float> highEndSetter
            {
                set { base.highEnd = value.value; }
            }

            // AP Global Density, default = 1
            [ParserTarget("globalDensity", optional = true)]
            private NumericParser<float> globalDensitySetter
            {
                set { base.globalDensity = value.value; }
            }

            // FogColorRamp, default = "white" {}
            [ParserTarget("fogColorRamp", optional = true)]
            private Texture2DParser fogColorRampSetter
            {
                set { base.fogColorRamp = value.value; }
            }

            // PlanetOpacity, default = 1
            [ParserTarget("planetOpacity", optional = true)]
            private NumericParser<float> planetOpacitySetter
            {
                set { base.planetOpacity = value.value; }
            }

            // Constructors
            public PQSMainOptimisedLoader () : base() { }
            public PQSMainOptimisedLoader (string contents) : base (contents) { }
            public PQSMainOptimisedLoader (Material material) : base(material) { }
        }
    }
}
