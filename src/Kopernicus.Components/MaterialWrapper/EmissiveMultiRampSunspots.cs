// Material wrapper generated by shader translator tool
using System;
using UnityEngine;

namespace Kopernicus
{
    namespace MaterialWrapper
    {
        public class EmissiveMultiRampSunspots : Material
        {
            // Internal property ID tracking object
            protected class Properties
            {
                // Return the shader for this wrapper
                private const String shaderName = "Emissive Multi Ramp Sunspots";
                public static Shader shader
                {
                    get { return Shader.Find (shaderName); }
                }

                // Ramp Map (RGBA), default = "white" { }
                public const String rampMapKey = "_RampMap";
                public Int32 rampMapID { get; private set; }

                // Noise Map (RGBA), default = "white" { }
                public const String noiseMapKey = "_NoiseMap";
                public Int32 noiseMapID { get; private set; }

                // Emission Color 0, default = (1,1,1,1)
                public const String emitColor0Key = "_EmitColor0";
                public Int32 emitColor0ID { get; private set; }

                // Emission Color 1, default = (1,1,1,1)
                public const String emitColor1Key = "_EmitColor1";
                public Int32 emitColor1ID { get; private set; }

                // Sunspot Map (R), default = "white" { }
                public const String sunspotTexKey = "_SunspotTex";
                public Int32 sunspotTexID { get; private set; }

                // Sunspot Power, default = 1
                public const String sunspotPowerKey = "_SunspotPower";
                public Int32 sunspotPowerID { get; private set; }

                // Sunspot Color, default = (0,0,0,0)
                public const String sunspotColorKey = "_SunspotColor";
                public Int32 sunspotColorID { get; private set; }

                // Rimlight Color, default = (1,1,1,1)
                public const String rimColorKey = "_RimColor";
                public Int32 rimColorID { get; private set; }

                // Rimlight Power, default = 0.2
                public const String rimPowerKey = "_RimPower";
                public Int32 rimPowerID { get; private set; }

                // Rimlight Blend, default = 0.2
                public const String rimBlendKey = "_RimBlend";
                public Int32 rimBlendID { get; private set; }

                // Singleton instance
                private static Properties singleton = null;
                public static Properties Instance
                {
                    get
                    {
                        // Construct the singleton if it does not exist
                        if(singleton == null)
                            singleton = new Properties();
            
                        return singleton;
                    }
                }

                private Properties()
                {
                    rampMapID = Shader.PropertyToID(rampMapKey);
                    noiseMapID = Shader.PropertyToID(noiseMapKey);
                    emitColor0ID = Shader.PropertyToID(emitColor0Key);
                    emitColor1ID = Shader.PropertyToID(emitColor1Key);
                    sunspotTexID = Shader.PropertyToID(sunspotTexKey);
                    sunspotPowerID = Shader.PropertyToID(sunspotPowerKey);
                    sunspotColorID = Shader.PropertyToID(sunspotColorKey);
                    rimColorID = Shader.PropertyToID(rimColorKey);
                    rimPowerID = Shader.PropertyToID(rimPowerKey);
                    rimBlendID = Shader.PropertyToID(rimBlendKey);
                }
            }

            // Is some random material this material 
            public static Boolean UsesSameShader(Material m)
            {
                return m.shader.name == Properties.shader.name;
            }

            // Ramp Map (RGBA), default = "white" { }
            public Texture2D rampMap
            {
                get { return GetTexture (Properties.Instance.rampMapID) as Texture2D; }
                set { SetTexture (Properties.Instance.rampMapID, value); }
            }

            public Vector2 rampMapScale
            {
                get { return GetTextureScale (Properties.rampMapKey); }
                set { SetTextureScale (Properties.rampMapKey, value); }
            }

            public Vector2 rampMapOffset
            {
                get { return GetTextureOffset (Properties.rampMapKey); }
                set { SetTextureOffset (Properties.rampMapKey, value); }
            }

            // Noise Map (RGBA), default = "white" { }
            public Texture2D noiseMap
            {
                get { return GetTexture (Properties.Instance.noiseMapID) as Texture2D; }
                set { SetTexture (Properties.Instance.noiseMapID, value); }
            }

            public Vector2 noiseMapScale
            {
                get { return GetTextureScale (Properties.noiseMapKey); }
                set { SetTextureScale (Properties.noiseMapKey, value); }
            }

            public Vector2 noiseMapOffset
            {
                get { return GetTextureOffset (Properties.noiseMapKey); }
                set { SetTextureOffset (Properties.noiseMapKey, value); }
            }

            // Emission Color 0, default = (1,1,1,1)
            public Color emitColor0
            {
                get { return GetColor (Properties.Instance.emitColor0ID); }
                set { SetColor (Properties.Instance.emitColor0ID, value); }
            }

            // Emission Color 1, default = (1,1,1,1)
            public Color emitColor1
            {
                get { return GetColor (Properties.Instance.emitColor1ID); }
                set { SetColor (Properties.Instance.emitColor1ID, value); }
            }

            // Sunspot Map (R), default = "white" { }
            public Texture2D sunspotTex
            {
                get { return GetTexture (Properties.Instance.sunspotTexID) as Texture2D; }
                set { SetTexture (Properties.Instance.sunspotTexID, value); }
            }

            public Vector2 sunspotTexScale
            {
                get { return GetTextureScale (Properties.sunspotTexKey); }
                set { SetTextureScale (Properties.sunspotTexKey, value); }
            }

            public Vector2 sunspotTexOffset
            {
                get { return GetTextureOffset (Properties.sunspotTexKey); }
                set { SetTextureOffset (Properties.sunspotTexKey, value); }
            }

            // Sunspot Power, default = 1
            public Single sunspotPower
            {
                get { return GetFloat (Properties.Instance.sunspotPowerID); }
                set { SetFloat (Properties.Instance.sunspotPowerID, value); }
            }

            // Sunspot Color, default = (0,0,0,0)
            public Color sunspotColor
            {
                get { return GetColor (Properties.Instance.sunspotColorID); }
                set { SetColor (Properties.Instance.sunspotColorID, value); }
            }

            // Rimlight Color, default = (1,1,1,1)
            public Color rimColor
            {
                get { return GetColor (Properties.Instance.rimColorID); }
                set { SetColor (Properties.Instance.rimColorID, value); }
            }

            // Rimlight Power, default = 0.2
            public Single rimPower
            {
                get { return GetFloat (Properties.Instance.rimPowerID); }
                set { SetFloat (Properties.Instance.rimPowerID, value); }
            }

            // Rimlight Blend, default = 0.2
            public Single rimBlend
            {
                get { return GetFloat (Properties.Instance.rimBlendID); }
                set { SetFloat (Properties.Instance.rimBlendID, value); }
            }

            public EmissiveMultiRampSunspots() : base(Properties.shader)
            {
            }

            [Obsolete("Creating materials from shader source String is no longer supported. Use Shader assets instead.")]
            public EmissiveMultiRampSunspots(String contents) : base(contents)
            {
                base.shader = Properties.shader;
            }

            public EmissiveMultiRampSunspots(Material material) : base(material)
            {
                // Throw exception if this material was not the proper material
                if (material.shader.name != Properties.shader.name)
                    throw new InvalidOperationException("Type Mismatch: Emissive Multi Ramp Sunspots shader required");
            }

        }
    }
}
