// Material wrapper generated by shader translator tool
using System;
using UnityEngine;

namespace Kopernicus
{
    namespace MaterialWrapper
    {
        public class AerialTransCutout : Material
        {
            // Internal property ID tracking object
            protected class Properties
            {
                // Return the shader for this wrapper
                private const String shaderName = "Terrain/PQS/Aerial Cutout";
                public static Shader shader
                {
                    get { return Shader.Find (shaderName); }
                }

                // Main Color, default = (1,1,1,1)
                public const String colorKey = "_Color";
                public Int32 colorID { get; private set; }

                // Base (RGB) Trans (A), default = "white" { }
                public const String mainTexKey = "_MainTex";
                public Int32 mainTexID { get; private set; }

                // Alpha cutoff, default = 0.5
                public const String texCutoffKey = "_texCutoff";
                public Int32 texCutoffID { get; private set; }

                // AP Fog Color, default = (0,0,1,1)
                public const String fogColorKey = "_fogColor";
                public Int32 fogColorID { get; private set; }

                // AP Height Fall Off, default = 1
                public const String heightFallOffKey = "_heightFallOff";
                public Int32 heightFallOffID { get; private set; }

                // AP Global Density, default = 1
                public const String globalDensityKey = "_globalDensity";
                public Int32 globalDensityID { get; private set; }

                // AP Atmosphere Depth, default = 1
                public const String atmosphereDepthKey = "_atmosphereDepth";
                public Int32 atmosphereDepthID { get; private set; }

                // Singleton instance
                private static Properties singleton = null;
                public static Properties Instance
                {
                    get
                    {
                        // Construct the singleton if it does not exist
                        if(singleton == null)
                            singleton = new Properties();
            
                        return singleton;
                    }
                }

                private Properties()
                {
                    colorID = Shader.PropertyToID(colorKey);
                    mainTexID = Shader.PropertyToID(mainTexKey);
                    texCutoffID = Shader.PropertyToID(texCutoffKey);
                    fogColorID = Shader.PropertyToID(fogColorKey);
                    heightFallOffID = Shader.PropertyToID(heightFallOffKey);
                    globalDensityID = Shader.PropertyToID(globalDensityKey);
                    atmosphereDepthID = Shader.PropertyToID(atmosphereDepthKey);
                }
            }
            
            // Is some random material this material 
            public static Boolean UsesSameShader(Material m)
            {
                return m.shader.name == Properties.shader.name;
            }

            // Main Color, default = (1,1,1,1)
            public new Color color
            {
                get { return GetColor (Properties.Instance.colorID); }
                set { SetColor (Properties.Instance.colorID, value); }
            }

            // Base (RGB) Trans (A), default = "white" { }
            public Texture2D mainTex
            {
                get { return GetTexture (Properties.Instance.mainTexID) as Texture2D; }
                set { SetTexture (Properties.Instance.mainTexID, value); }
            }

            public Vector2 mainTexScale
            {
                get { return GetTextureScale (Properties.mainTexKey); }
                set { SetTextureScale (Properties.mainTexKey, value); }
            }

            public Vector2 mainTexOffset
            {
                get { return GetTextureOffset (Properties.mainTexKey); }
                set { SetTextureOffset (Properties.mainTexKey, value); }
            }

            // Alpha cutoff, default = 0.5
            public Single texCutoff
            {
                get { return GetFloat (Properties.Instance.texCutoffID); }
                set { SetFloat (Properties.Instance.texCutoffID, Mathf.Clamp(value,0f,1f)); }
            }

            // AP Fog Color, default = (0,0,1,1)
            public Color fogColor
            {
                get { return GetColor (Properties.Instance.fogColorID); }
                set { SetColor (Properties.Instance.fogColorID, value); }
            }

            // AP Height Fall Off, default = 1
            public Single heightFallOff
            {
                get { return GetFloat (Properties.Instance.heightFallOffID); }
                set { SetFloat (Properties.Instance.heightFallOffID, value); }
            }

            // AP Global Density, default = 1
            public Single globalDensity
            {
                get { return GetFloat (Properties.Instance.globalDensityID); }
                set { SetFloat (Properties.Instance.globalDensityID, value); }
            }

            // AP Atmosphere Depth, default = 1
            public Single atmosphereDepth
            {
                get { return GetFloat (Properties.Instance.atmosphereDepthID); }
                set { SetFloat (Properties.Instance.atmosphereDepthID, value); }
            }

            public AerialTransCutout() : base(Properties.shader)
            {
            }

            [Obsolete("Creating materials from shader source String is no longer supported. Use Shader assets instead.")]
            public AerialTransCutout(String contents) : base(contents)
            {
                base.shader = Properties.shader;
            }

            public AerialTransCutout(Material material) : base(material)
            {
                // Throw exception if this material was not the proper material
                if (material.shader.name != Properties.shader.name)
                    throw new InvalidOperationException("Type Mismatch: Terrain/PQS/Aerial Cutout shader required");
            }

        }
    }
}
